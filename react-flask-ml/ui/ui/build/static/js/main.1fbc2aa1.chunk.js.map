{"version":3,"sources":["imgs/Iris_setosa.jpg","imgs/Iris_versicolor.jpg","imgs/Iris_virginica.jpg","imgs/iris_background_1.jpg","IrisPredictionForm.js","ScatterPlotMatrix.js","MyTimer.js","InputSlider.js","IrisPredictionResult.js","IrisPredictionComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fileReader","width","size","padding","x","y","xAxis","yAxis","color","domainByTrait","svg","cells","traits","n","MyTimer","props","state","date","Date","this","TimerID","setInterval","tick","clearInterval","setState","id","toLocaleTimeString","React","Component","InputSlider","value","handleChange","bind","event","target","onChange","className","label","type","name","placeholder","min","max","step","IrisPredictionForm","values","handleFileChosen","handleFileRead","idx","newValue","map","item","j","selectedFile","FileReader","onloadend","readAsText","onDataFile","result","htmlFor","e","files","accept","style","IrisPredictionResult","results","inputs","species","backgroundImage","Iris_setosa","Iris_versicolor","Iris_virginica","histories","IrisPredictionComponent","handleDataFile","timerID","length","temp","forEach","postData","substr","then","res","predictions","prediction","replace","RegExp","push","sepalLength","sepalWidth","petalLength","petalWidth","onNewData","toString","fileContent","temp1","split","index","parseFloat","splice","join","url","Promise","resolve","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","open","send","data","setRequestHeader","toFixed","d3","window","ScatterPlotMatrix","updateDate","init","setupCanvasAndDrawData","document","getElementById","parentElement","clientWidth","scaleLinear","range","axisBottom","scale","ticks","axisLeft","scaleOrdinal","schemeCategory10","console","log","ref","thisReactComponent","trait","extent","d","selectAll","each","domain","select","call","p","plot","keys","filter","stringify","tickSize","refs","plotContainer","append","attr","enter","i","Object","newCells","cross","merge","text","brushCell","brush","on","move","brushSelection","classed","cellRef","doSetup","cell","drawCell","drawData","aCell","aCellData","joins","exit","remove","transition","duration","a","b","c","m","App","counter","predictionData","handleNewData","newData","concat","iris_background_1","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1fbc2aa1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Iris_setosa.ae50200c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Iris_versicolor.5a579307.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Iris_virginica.d805f204.jpg\";","module.exports = __webpack_public_path__ + \"static/media/iris_background_1.c6874412.jpg\";","import React from 'react';\nimport './IrisPredictionForm.css';\nimport InputSlider from './InputSlider';\n\nlet fileReader;\nclass IrisPredictionForm extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      values: [0,0,0,0]\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFileChosen = this.handleFileChosen.bind(this);\n    this.handleFileRead = this.handleFileRead.bind(this);\n  }\n  handleChange(idx, newValue) {\n    // this.setState({values: [this.state.values]});\n    this.setState(state => {\n      // console.log(state)\n      const values = state.values.map((item, j) => {\n        if (j === idx) {\n          return newValue;\n        } else {\n          return item;\n        }\n      });\n      return {\n        values,\n      };\n    })\n    // this.state.values[idx] = newValue;\n    // console.log(`${idx} -- ${newValue}`)\n    // console.log(this.state.values.toString().replace(new RegExp(/,/g), ', '))\n    // console.log(this.state.values.toString())\n    this.props.onChange(this.state.values);\n  }\n  handleFileChosen(selectedFile){\n    fileReader = new FileReader();\n    fileReader.onloadend = this.handleFileRead;\n    fileReader.readAsText(selectedFile)\n  }\n  handleFileRead(selectedFile){\n    // console.log(fileReader.result) \n    this.props.onDataFile(fileReader.result);\n  }\n  render() {\n    return (\n    <section className=\"iris-prediction-form\">\n      <InputSlider onChange={ (value) => this.handleChange(0, value) } min=\"4.0\" max=\"8.0\" label=\"Sepal Length\"/>\n      <InputSlider onChange={ (value) => this.handleChange(1, value) } min=\"1.5\" max=\"5.0\" label=\"Sepal Width\"/>\n      <InputSlider onChange={ (value) => this.handleChange(2, value) } min=\"0.5\" max=\"7.5\" label=\"Petal Length\"/>\n      <InputSlider onChange={ (value) => this.handleChange(3, value) } min=\"0.0\" max=\"3.0\" label=\"Petal Width\"/>\n      <div>\n        <label htmlFor=\"files\" id=\"file-input\">\n          Choose a CSV File instead! \n        </label>\n        <input onChange={ (e) => this.handleFileChosen(e.target.files[0]) } \n               accept='.csv'\n               id=\"files\" \n               style={{\"visibility\":\"hidden\"}} \n               type=\"file\"/>\n      </div>\n    </section>\n    )\n  }\n}\n\n\nexport default IrisPredictionForm;\n","import React from 'react';\nimport './ScatterPlotMatrix.css';\n\nconst d3 = window.d3; //import the script normally in the html file before the app root element\nlet width, size, padding, x, y, xAxis, yAxis, color, domainByTrait, svg, cells, traits, n;//, data, wasSetup;\n\nclass ScatterPlotMatrix extends React.Component{\n\n\tcomponentDidUpdate(){\n\t\t// append the svg object to the body of the page\n\t\tif(!svg){\n\t\t\tthis.init();\n\t\t\tthis.setupCanvasAndDrawData(this.props.data)\n\t\t}\n\t\telse\n\t\t\tthis.updateDate(this.props.data)\n\t}\n\n\tinit(){\n\t\t//size for subframe\n\t\twidth = document.getElementById('scatter-plot-matrix').parentElement.clientWidth\n\t\tpadding = 20;\n\t\tsize = (width - 4 * padding) / 4;\n\t\t\n\t\t// wasSetup = false;\n\n\t\t//scales for subframes\n\t\tx = d3.scaleLinear().range([padding / 2, size - padding / 2]);\n\t\ty = d3.scaleLinear().range([size - padding / 2, padding / 2]);\n\n\t\t//Axis for subframes\n\t\txAxis = d3.axisBottom().scale(x).ticks(6);\n\t\tyAxis = d3.axisLeft().scale(y).ticks(6);\n\n\t\t//color scale/scheme\n\t\tcolor = d3.scaleOrdinal(d3.schemeCategory10);\n\n\t\tconsole.log('d3 Document Initialized')\n\t}\n\n\n\trender() {\n    \n\t\treturn (\n\t\t\t<section className=\"scatter-plot-matrix\" id=\"scatter-plot-matrix\">\n\t\t\t\t<div className=\"plot-container\" ref=\"plotContainer\">\n\t\t\t\t\t{/* {this.props.data.map(item => (<span className=\"station\" key={item.key}>{item.key}</span>))} */}\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t)\n\t}\n\t\n\t\n\tupdateDate(data){\n\t\tlet thisReactComponent = this;\n\t\n\t\ttraits.forEach(function(trait) {\n\t\t\tdomainByTrait[trait] = d3.extent(data, function(d) { /*console.log(d);*/ return d[trait]; });\n\t\t});\n\t\tsvg.selectAll(\".x.axis\").each(function(d) { x.domain(domainByTrait[d]); d3.select(this).call(xAxis);  });\n\t\tsvg.selectAll(\".y.axis\").each(function(d) { y.domain(domainByTrait[d]); d3.select(this).call(yAxis);  });\n\t\tsvg.selectAll(\".cell\").each(function(p) { thisReactComponent.plot(this, p, false) });\n\t}\n\n\tsetupCanvasAndDrawData(data){\n\n\t\tlet thisReactComponent = this;\n\t\t//sepalLength,sepalWidth,petalLength,petalWidth,species\n\t\t//console.log(data)\n\t\t\n\n\t\tdomainByTrait = {} //Empty object\n\t\ttraits = d3.keys(data[0]).filter(function(d) { return d !== \"species\"; }) //get columns names except for species\n\t\tn = traits.length; //get nber of cols\n\n\t\t//Iterate through each col names and get min, max (extent)\n\t\ttraits.forEach(function(trait) {\n\t\t\tdomainByTrait[trait] = d3.extent(data, function(d) { /*console.log(d);*/ return d[trait]; });\n\t\t});\t\n\t\tconsole.log(`Obtained domain range by data variables: \\n ${JSON.stringify(domainByTrait)}\\n`)\t\n\n\n\n\n\t\t//create huge underlying grid that will span the whole parent frame (all subframes)\n\t\txAxis.tickSize(size * n);\n\t\tyAxis.tickSize(-size * n);\t\n\n\t\t//create svg container and an orgin point from which to start drawing the remaining\n\t\tsvg = d3.select(this.refs.plotContainer).append(\"svg\")\n\t\t\t\t\t\t\t\t\t\t.attr(\"width\", size * n + padding)\n\t\t\t\t\t\t\t\t\t\t.attr(\"height\", size * n + padding)\n\t\t\t\t\t\t\t\t\t .append(\"g\")\n\t\t\t\t\t\t\t\t\t\t.attr(\"transform\", \"translate(\" + padding + \",\" + padding / 2 + \")\");\n\n\t\tsvg.selectAll(\".x.axis\")\n\t\t\t.data(traits)\n\t\t\t.enter().append(\"g\")\n\t\t\t  .attr(\"class\", \"x axis\")\n\t\t\t  .attr(\"transform\", function(d, i) { return \"translate(\" + (n - i - 1) * size + \",0)\"; })\n\t\t\t  .each(function(d) { \n\t\t\t\t\tx.domain(domainByTrait[d]); \n\t\t\t\t\td3.select(this).call(xAxis); \n\t\t\t\t});\n\n\t\tsvg.selectAll(\".y.axis\")\n\t\t\t.data(traits)\n\t\t\t.enter().append(\"g\")\n\t\t\t  .attr(\"class\", \"y axis\")\n\t\t\t  .attr(\"transform\", function(d, i) { return \"translate(0,\" + i * size + \")\"; })\n\t\t\t  .each(function(d) { \n\t\t\t\t\ty.domain(domainByTrait[d]); \n\t\t\t\t  d3.select(this).call(yAxis); \n\t\t\t\t});\n\t\tconsole.log(`Setup canvas and axises for each data trait: \\n ${Object.keys(domainByTrait)}\\n`)\t\n\n\n\n\t\t//16 cells not yet drawn with their x and y names and starting positions\t\t\t\t\t\t\n\t\tcells = svg.selectAll(\".cell\").data(thisReactComponent.cross(traits, traits))  \n\t\tlet newCells = cells.enter()\n\t\t\t\t\t\t\t.append(\"g\")\n\t\t\t\t\t\t\t\t.attr(\"class\", \"cell\")\n\t\t\t\t\t\t\t\t.attr(\"transform\", function(d) {\n\t\t\t\t\t\t\t\t\t  //positioning at top left of cell to start drawing\n\t\t\t\t\t\t\t\t\t  return \"translate(\" + (n - d.i - 1) * size + \",\" + d.j * size + \")\"; \n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t//plot everything that needs to be plotted in those cells\n\t\t\t\t\t\t\t.each(function(p){ thisReactComponent.plot(this, p, true) });\n\t\tconsole.log(`Setup plot frames, also fill the plot with the dataset`)\t\n\n\n\n\t\t// Titles for the diagonal.\n\t\tconsole.log(cells)\n\t\tcells = newCells.merge(cells)\n\t\tcells.filter(function(d) { return d.i === d.j; })\n\t\t      .append(\"text\") // get the cells where d.i === d.j\n\t\t\t    .attr(\"x\", padding) //position the text\n\t\t\t    .attr(\"y\", padding)\n\t\t\t    .attr(\"dy\", \".71em\")\n           .style(\"fill\", \"#aaa\")\n\t\t\t    .text(function(d) { return d.x; }); //write the text (current column trait)\n\t\tconsole.log(`Added titles on the diagonal`)\n\n\n\n\n\t\t//create brush object with event handlers on start, brush and end\n\t\tvar brush = d3.brush()\n\t\t\t\t\t  .on(\"start\", brushstart)\n\t\t\t\t\t  .on(\"brush\", brushmove)\n\t\t\t\t\t  .on(\"end\", brushend)\n\t\t\t\t\t  .extent([[0,0],[size,size]]);\n\t\t//bind brush object to cell selection\n\t\tcells.call(brush);\n\n\t\tvar brushCell;\n\n\t\t// Clear the previously-active brush, if any.\n\t\tfunction brushstart(p) {\n\t\t\t// if the active cell being brushed is not this cell\n\t\t\tif (brushCell !== this) {\n\t\t\t\t//select a future active cell being brushed and bind brush movement to it\n\t\t\t\td3.select(brushCell).call(brush.move, null);\n\t\t\t\t//bind this virtual active brushcell to this cell\n\t\t\t\tbrushCell = this;\n\t\t\t  \n\t\t\t\t//m not sure - enforcing domain to be within min and max?\n\t\t\t\tx.domain(domainByTrait[p.x]);\n\t\t\t\ty.domain(domainByTrait[p.y]);\n\t\t\t}\n\t\t}\n\n\t\t// Highlight the selected circles.\n\t\tfunction brushmove(p) {\n\n\t\t\tvar e = d3.brushSelection(this);\n\t\t\t\n\t\t\t//we are basically oing through the whole dataset (indexed in the abstart world of d3)\n\t\t\t//and givin the circle a class hidden if the callback return false\n\t\t\tsvg.selectAll(\"circle\").classed(\"hidden\", function(d) {\n\n\t\t\t  // if e is truthy (brushing is ucrrently happening?) \n\t\t\t  // do the complicated thing after the ':'\n\t\t\t\treturn !e\n\t\t\t\t\t\t? false\n\t\t\t\t\t\t: ( // checking whether the point is in the brushing square \n\t\t\t\t\t\t\t// the brushing square is e[0][0] e[0][1] e[1][0] e[1][1] \n\t\t\t\t\t\t\t   e[0][0] > x(+d[p.x]) \n\t\t\t\t\t\t\t|| x(+d[p.x]) > e[1][0]\n\t\t\t\t\t\t\t|| e[0][1] > y(+d[p.y]) \n\t\t\t\t\t\t\t|| y(+d[p.y]) > e[1][1]\n\t\t\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\t// If the brush is empty, select all circles.\n\t\tfunction brushend() {\n\t\t\tvar e = d3.brushSelection(this);\n\n\t\t\t//no more brushing happening\n\t\t\tif (e === null) \n\t\t\t\t//inactive points were given the hidden class, we are removing this class from them\n\t\t\t\tsvg.selectAll(\".hidden\").classed(\"hidden\", false);\n\t\t}\n\t\tconsole.log(`Setup the brushes`)\n\t}\n\n\n\t//Does the actual plotting\n\tplot(cellRef, p, doSetup) {\n\t\t//current cell\n\t\tvar cell = d3.select(cellRef);\n\n\t\t//get domain values (min and max for the current x-trait and y-trait relevant to this cell)\n\t\tx.domain(domainByTrait[p.x]);\n\t\ty.domain(domainByTrait[p.y]);\n\n\t\tif(doSetup)\n\t\t\tthis.drawCell(cell)\n\t\t\n\t\tthis.drawData(cell, p)\n\t}\n\t\n\tdrawData(aCell, aCellData){\n\t\t//plots the points\n\t\tlet joins = aCell.selectAll(\"circle\").data(this.props.data)\n\n\t\tjoins.exit().remove();\n\n\t\tlet newJoins = joins.enter()\n\t\t\t                .append(\"circle\")\n\t\t\t                .attr(\"r\", 0)\n\n\t\tnewJoins.merge(joins).transition()\n\t\t\t\t\t\t\t .duration(500)\n\t\t\t\t\t\t\t .attr(\"cx\", function(d) { return x(d[aCellData.x]); })\n\t\t\t\t\t\t\t .attr(\"cy\", function(d) { return y(d[aCellData.y]); })\n\t\t\t\t\t\t\t .attr(\"r\", 2)\n\t\t\t\t\t\t\t .style(\"fill\", function(d) { return color(d.species); });\n\t\t\t\n\t}\n\tdrawCell(aCell){\n\t\t//create cell frame\n\t\taCell.append(\"rect\")\n\t\t\t.attr(\"class\", \"frame\")\n\t\t\t.attr(\"x\", padding / 2)\n\t\t\t.attr(\"y\", padding / 2)\n\t\t\t.attr(\"width\", size - padding)\n\t\t\t.attr(\"height\", size - padding);\t\n\t}\n\n\t//return a matrix as an array of (cell x name and start pos, y name and pos)\n\tcross(a, b) {\n\t\tvar c = [],       //will be returned\n\t\t\tn = a.length, //4 - a is cols\n\t\t\tm = b.length, //4 - b is identical to a (sepal width,...)\n\t\t\ti, \n\t\t\tj;\n\n\t\tfor (i = -1; ++i < n;) \n\t\t\tfor (j = -1; ++j < m;) \n\t\t\t\tc.push({\n\t\t\t\t\tx: a[i], // cell x name (sepal length,...)\n\t\t\t\t\ti: i,    // cell x starting position (0 1 2 3) ------ (i = -1; ++i < n;) is the same as (i=0; i<n; i++)\n\t\t\t\t\ty: b[j], // cell y name (sepal length,...)\n\t\t\t\t\tj: j     // cell y starting position (0 1 2 3) ------ (i = -1; ++i < n;) is the same as (i=0; i<n; i++)\n\t\t\t\t});\n\t\treturn c;\n\t}\n\n}\n\n\nexport default ScatterPlotMatrix;\n","import React from 'react';\nimport './MyTimer.css';\n\n\nclass MyTimer extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      date: new Date(),\n    }\n  }\n  componentDidMount() {\n    this.TimerID = setInterval(\n      () => this.tick(), \n      1000\n    )\n  }\n  componentWillUnmount() {\n    clearInterval(this.TimerID);\n  }\n  tick() {\n    this.setState({\n      date: new Date(),\n    })\n  }\n  render() {\n    return (<section id=\"MyTimer\">{this.state.date.toLocaleTimeString()}</section>)\n  }\n}\n\n\nexport default MyTimer;\n","import React from 'react';\nimport './InputSlider.css';\n\n\nclass InputSlider extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      value: 0\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({value: event.target.value});\n    this.props.onChange(event.target.value);\n  }\n  render() {\n    return (\n    <section className=\"input-slider\">\n      <label>\n        <span className=\"input-slider-text\">\n          <span>{this.props.label ? this.props.label : 'Petal Width' } : </span>\n          <input type=\"number\" \n                 name=\"input-slider-num\" \n                 placeholder=\"0\" \n                 value={this.state.value} \n                 onChange={this.handleChange} \n                 min={this.props.min ? this.props.min : 0 } \n                 max={this.props.max ? this.props.max : 100 }  \n                 step={this.props.step ? this.props.step : 0.01 } />\n        </span>\n        <span className=\"input-slider-range\">\n          <input type=\"range\" \n                 name=\"input-slider-num\" \n                 placeholder=\"0\" \n                 value={this.state.value} \n                 onChange={this.handleChange} \n                 min={this.props.min ? this.props.min : 0 } \n                 max={this.props.max ? this.props.max : 100 }  \n                 step={this.props.step ? this.props.step : 0.01 } />\n        </span>\n      </label>\n    </section>\n    )\n  }\n}\n\n\nexport default InputSlider;\n","import React from 'react';\nimport './IrisPredictionResult.css';\n\nimport Iris_setosa from './imgs/Iris_setosa.jpg';\nimport Iris_versicolor from './imgs/Iris_versicolor.jpg';\nimport Iris_virginica from './imgs/Iris_virginica.jpg';\n\nclass IrisPredictionResult extends React.Component{\n  \n  render() {\n    return (\n    <section className=\"iris-prediction\">\n      <div className=\"iris-prediction__text-container\">\n        <div className=\"iris-prediction__text--faded\">Sepal height, Sepal width, Petal height, Petal Width</div>\n        <div className=\"iris-prediction__text--faded\">{this.props.results.inputs}</div>\n        <div className=\"iris-prediction__text--faded\">Prediction:</div>\n        <div className=\"iris-prediction__text\">{this.props.results.species}</div>\n      </div>\n      <div className=\"iris-prediction__image-container\">\n        <div className=\"mask\"></div>\n        <div className={(this.props.results.species === 'Iris_setosa' ? 'iris-prediction__image--active' : '')}>\n          <div style={{backgroundImage: `url('${Iris_setosa}')`}}></div>\n          <div>Iris Setosa</div>\n        </div>\n        <div className={(this.props.results.species === 'Iris_versicolor' ? 'iris-prediction__image--active' : '')}>\n          <div style={{backgroundImage: `url('${Iris_versicolor}')`}}></div>\n          <div>Iris Versicolor</div>\n        </div>\n        <div className={(this.props.results.species === 'Iris_virginica' ? 'iris-prediction__image--active' : '')}>\n          <div style={{backgroundImage: `url('${Iris_virginica}')`}}></div>\n          <div>Iris Virginica</div>\n        </div>\n      </div>\n    </section>\n    )\n  }\n}\n\n\nexport default IrisPredictionResult;\n","import React from 'react';\nimport './IrisPredictionComponent.css';\nimport IrisPredictionForm from './IrisPredictionForm';\nimport IrisPredictionResult from './IrisPredictionResult';\n\nlet histories = []\n\nclass IrisPredictionComponent extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      //sepal_length,sepal_width,petal_length,petal_width\n      inputs: [0, 0, 0, 0],\n      species: 'Iris_versicolor',\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDataFile = this.handleDataFile.bind(this);\n  }\n\n  componentDidMount(){\n    this.timerID = setInterval(()=>{\n      // console.log(histories.length)\n      // console.log(histories.length)\n      if(histories.length !== 0){\n        let temp = '';\n        histories.forEach((item) => {\n          temp = `${temp}\\r\\n${item}`\n        })\n        histories = [];\n        // console.log(temp.substr(2))\n        this.postData('http://localhost:5000/api/predict?format=csv', temp.substr(2))\n        .then((res)=>{\n          // console.log(res.predictions)\n          // console.log(res.predictions[res.predictions.length - 1])\n          // console.log(typeof(res.predictions[res.predictions.length - 1].inputs))\n          // console.log(typeof(res.predictions[res.predictions.length - 1].inputs.map(item => parseFloat(item))))\n          this.setState({\n            inputs: res.predictions[res.predictions.length - 1].inputs,\n            species: res.predictions[res.predictions.length - 1].prediction.replace(new RegExp(/-/g), '_'),\n          })\n          let temp = []\n          res.predictions.forEach((item) => {\n            temp.push({\n              sepalLength: item.inputs[0], \n              sepalWidth: item.inputs[1],\n              petalLength: item.inputs[2], \n              petalWidth: item.inputs[3], \n              species: item.prediction.replace(new RegExp(/-/g), '_'),\n            })\n          })\n          // console.log(temp)\n          this.props.onNewData(temp);\n        })\n        \n      }\n    }, 250)\n  }\n\n  handleChange(values) {\n    this.setState({inputs: values})\n    histories.push(values.toString())\n    // console.log(values.toString().replace(new RegExp(/,/g), ', '))\n    // this.setState({value: event.target.value});\n  }\n  handleDataFile(fileContent){\n    // console.log(fileContent.split('\\n'))\n    let temp1 = [];\n    fileContent.split('\\n').forEach((item, index) => {\n      const temp = item.replace(new RegExp(/\\r/g), '').split(',')\n      if(parseFloat(temp[0]))\n        temp1.push(temp.splice(0,4).join(',').replace(new RegExp(/ /g), ''))\n    })\n    // console.log(temp1)\n    histories = temp1\n  }\n\n  getData(url) {\n    return new Promise((resolve) => {\n      const xhttp = new XMLHttpRequest();\n      xhttp.onreadystatechange = () => {\n        if (xhttp.readyState === 4 && xhttp.status === 200) {\n          resolve(JSON.parse(xhttp.responseText));\n        }\n      };\n      xhttp.open('GET', url, true);\n      xhttp.send();\n    });\n  }\n\n  postData(url, data) {\n    return new Promise((resolve) => {\n      const xhttp = new XMLHttpRequest();\n      xhttp.onreadystatechange = () => {\n        if (xhttp.readyState === 4 && xhttp.status === 200) {\n          resolve(JSON.parse(xhttp.responseText));\n        }\n      };\n      xhttp.open('POST', url, true);\n      xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n      xhttp.send(data);\n    });\n  }\n\n\n  render() {\n    return (\n    <section className=\"iris-prediction-component\">\n      <div>\n        <p>Input Controls</p>\n        <IrisPredictionForm onChange={ this.handleChange } onDataFile={ this.handleDataFile }/>\n      </div>\n      <div>\n        <p>Prediction</p>\n        <IrisPredictionResult results={{\n          'species': this.state.species,\n          'inputs': this.state.inputs.map(item => parseFloat(item).toFixed(2)).join(', ')\n        }}/>\n      </div>\n    </section>\n    )\n  }\n}\n\n\nexport default IrisPredictionComponent;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport MyTimer from './MyTimer';\nimport IrisPredictionComponent from './IrisPredictionComponent';\nimport ScatterPlotMatrix from './ScatterPlotMatrix';\n// import IrisPredictionResult from './IrisPredictionResult';\n// import IrisPredictionForm from './IrisPredictionForm';\n// import InputSlider from './InputSlider';\n\nimport iris_background_1 from './imgs/iris_background_1.jpg';\n\n// import flowers from './flowers.csv';\n// const d3 = window.d3;\n// let fileContent = []\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      counter: 0,\n      species: ['Iris_setosa','Iris_versicolor','Iris_virginica'],\n      date: new Date(),\n      data: {\n        'species': 'Iris_versicolor',\n        'inputs': '13.2, 52.4, 26.3, 21.2',\n      },\n      predictionData: [],\n    }\n    this.handleNewData = this.handleNewData.bind(this);\n\t\t// d3.csv(flowers, (error, file) => {\n\t\t// \tconsole.log('Read data file')\n    //   fileContent = file\n    //   console.log(fileContent) //array of {sepalLength: \"4.9\", sepalWidth: \"3.0\", petalLength: \"1.4\", petalWidth: \"0.2\", species: \"setosa\"}\n\t\t//   // this.state['fileData'] = fileContent.filter((imte, index) => index < 50)\n    //   // console.log(this.state.fileData)\n\t\t// });\n  }\n\n  handleNewData(newData){\n    // {sepalLength: \"4.9\", sepalWidth: \"3.0\", petalLength: \"1.4\", petalWidth: \"0.2\", species: \"setosa\"}\n    // console.log(newData)\n    this.setState({ predictionData: this.state.predictionData.concat(newData)})\n    // console.log(this.state.predictionData)\n  }\n\n\n  render() {\n    return (<div className=\"App\" style={{backgroundImage: `url('${iris_background_1}')`}}>\n      <main className=\"App-main-content\" >\n        <MyTimer />\n        <h3>\n          Change the input controls and see live prediction of the ML Model.\n        </h3>\n        \n        <div className=\"ScatterPlotMatrix-container\">\n          <ScatterPlotMatrix data={this.state.predictionData}/>\n        </div>\n        <div>\n          <IrisPredictionComponent onNewData={ this.handleNewData }/>\n        </div>\n      </main>\n    </div>)\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}